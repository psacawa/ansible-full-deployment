---
- hosts: localhost
  gather_facts: false
  vars_files:
    - vars.yml
  tasks:
    - name: Create EC2 key for deployment
      ec2_key:
        name: "{{ key_name }}"
        region: "{{ aws_region }}"
      register: key_result
    - name: Save private key to disk
      copy:
        content: "{{ key_result.key.private_key }}"
        dest: "~/.ssh/{{ key_name }}"
        mode: 0600
      when: key_result.changed 
    - name: Make EC2 machines
      ec2:
        key_name: "{{ key_name }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ami_id }}"
        region: "{{ aws_region }}"
        wait: true
        exact_count: 1
        count_tag: 
          Name: "{{ item.name }}"
        instance_tags: 
          Name: "{{ item.name }}"
      register: ec2_result
      with_items: "{{ ec2_instances }}"
    - ec2_instance_info: 
      register: ec2_instance_info
    - copy: content="{{ ec2_instance_info }}" dest=./ec2.log
    - debug: var=ec2_instance_info
    - name: Build inventory from ec2 hosts
      add_host:
        # name: "{{ item.public_dns_name }}"
        name: "{{ item.public_ip_address }}"
        # groups:  "name_{{ item.tags.Name }}"
        groups:  "{{ item.tags.Name }}"
        # when: "{{ item.public_dns_name }}"
      when: item.public_ip_address is defined 
      with_items: "{{ ec2_instance_info.instances }}"
    - name: wait for SSH
      wait_for_connection:
        timeout: 60
      delegate_to: "{{ item.public_dns_name }}"
      when: item.public_dns_name is defined 
      with_items: "{{ ec2_instance_info.instance }}"
    - debug: var=groups 
    # temporary: create a DNS record pointing at application node
    - name: Make DNS record
      route53:
        zone: "{{ domain_name }}"
        record: "{{ domain_name }}"
        type: A
        # value: "{{ groups['name_full_www'][0] }}"
        value: "{{ groups['full_www'][0] }}"
        state: present
        overwrite: true



  # post_tasks:
  #   - name: refresh inventory
  #     meta: refresh_inventory
